{
    "type": "page",
    "title": "Welcome to Steedos",
    "body": [
        {
            "type": "container",
            "body": [
                {
                    "type": "service",
                    "body": [
                        {
                            "type": "grid",
                            "id": "u:46465f264f1c",
                            "columns": [
                                {
                                    "body": [
                                        {
                                            "type": "avatar",
                                            "size": 60,
                                            "src": "${_display.avatar.url}",
                                            "id": "u:1e9782e0ef9a"
                                        }
                                    ],
                                    "id": "u:21c2552704d4",
                                    "md": 2,
                                    "columnClassName": "flex justify-center items-center mr-2",
                                    "style": {}
                                },
                                {
                                    "body": [
                                        {
                                            "type": "service",
                                            "body": [
                                                {
                                                    "type": "tpl",
                                                    "tpl": "<span style='font-weight: bold'>${name}</span> - ${current_organization_label} ",
                                                    "inline": true,
                                                    "wrapperComponent": "",
                                                    "id": "u:84c89a94fb25",
                                                    "style": {}
                                                },
                                                {
                                                    "type": "tpl",
                                                    "tpl": "上班：${work_start}；下班：${work_end}；单日在岗办公时长不少于${daily_hours}小时。",
                                                    "inline": false,
                                                    "wrapperComponent": "",
                                                    "id": "u:84c89a94fb25",
                                                    "style": {}
                                                }
                                            ],
                                            "id": "u:358ede4cc8e4",
                                            "api": {
                                                "url": "${context.rootUrl}/graphql",
                                                "method": "post",
                                                "headers": {
                                                    "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                },
                                                "adaptor": "\nconst result = _.filter(payload.data.rows, function (o) { return o.attendance_group.length; });\n\nlet data = {\n  work_start: '',\n  work_end: '',\n  daily_hours: ''\n}\nif (result && result.length) {\n  // 默认只有一个规则\n  const rule = result[0];\n  let work_start = rule.work_start.slice(11, 16);\n  work_start = work_start.indexOf('0') === 0 ? work_start.slice(1) : work_start;\n  data.work_start = work_start;\n  let work_end = rule.work_end.slice(11, 16);\n  work_end = work_end.indexOf('0') === 0 ? work_end.slice(1) : work_end;\n  data.work_end = work_end;\n  data.daily_hours = rule.daily_hours;\n}\npayload.data = data;\n\nreturn payload;",
                                                "requestAdaptor": "",
                                                "data": {
                                                    "query": "{rows:attendance_rule_settings(filters: [\"status\", \"=\", \"open\"]) {    name ,status,work_start, work_end,daily_hours, begins_work_clock , begins_quit_clock,  end_work_clock  , end_quit_clock , attendance_group: _related_attendance_group_attendance_rule_settings(      filters: [\"users\", \"contains\", \"${context.userId}\"]    ) {      name ,users , _display: _ui {        users      }    }  }}",
                                                    "organizations_parents_labels": "${organizations_parents_labels}"
                                                },
                                                "messages": {},
                                                "sendOn": ""
                                            },
                                            "messages": {}
                                        }
                                    ],
                                    "id": "u:31097d3a7588",
                                    "md": "auto",
                                    "style": {
                                        "paddingTop": "10px"
                                    }
                                }
                            ],
                            "style": {
                                "paddingLeft": "0.5rem",
                                "paddingRight": "0.5rem",
                                "paddingTop": "0.5rem",
                                "paddingBottom": "0.5rem"
                            },
                            "className": "flex justify-center items-center"
                        }
                    ],
                    "id": "u:9ac77cd24d78",
                    "api": {
                        "url": "${context.rootUrl}/graphql",
                        "method": "post",
                        "headers": {
                            "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                        },
                        "adaptor": "\nlet data = payload.data.rows[0];\ndata.organizations_parents_labels = _.map(data._display.organizations_parents, (item) => { return item.label; });\ndata.current_organization_label = data.organizations_parents_labels[data.organizations_parents_labels.length - 1];\npayload.data = data;\nreturn payload;",
                        "requestAdaptor": "",
                        "data": {
                            "query": "{rows:space_users(filters:[\"user\", \"=\", \"${context.userId}\"]){ name,avatar,organizations_parents,_display:_ui{avatar, organizations_parents} }}"
                        },
                        "messages": {},
                        "sendOn": ""
                    },
                    "messages": {}
                }
            ],
            "style": {
                "position": "static",
                "display": "block",
                "radius": {
                    "top-left-border-radius": "0.5rem",
                    "top-right-border-radius": "0.5rem",
                    "bottom-left-border-radius": "0.5rem",
                    "bottom-right-border-radius": "0.5rem"
                },
                "background": "#fcfcfc"
            },
            "wrapperBody": false,
            "id": "u:7e804c48556d",
            "isFixedHeight": false,
            "isFixedWidth": false
        },
        {
            "type": "container",
            "id": "u:a0ffaaa4b79c",
            "body": [
                {
                    "type": "container",
                    "body": [
                        {
                            "type": "service",
                            "dataProvider": "const timer = setInterval(() => {\n  let date = new Date();\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let seconds = date.getSeconds();\n  if (month < 10) { month = '0' + month; }\n  if (day < 10) { day = '0' + day; }\n  if (seconds < 10) { seconds = '0' + seconds; }\n  if (minutes < 10) { minutes = '0' + minutes; }\n  if (hours < 10) { hours = '0' + hours; }\n  const date_time = year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds; setData({ date_time: date_time })\n}, 1000); return () => { clearInterval(timer) }",
                            "body": [
                                {
                                    "type": "tpl",
                                    "tpl": "<div style='font-size: 12px; color: #d1d5db'>${MID(date_time,0,10)}</div><div style='font-size:24px;font-weight:600;color:#fff'>${MID(date_time,11,8)}</div><div style='font-size:14px;color: #f8f9fa;'>${description}</div>",
                                    "id": "u:689c173a3afa",
                                    "inline": false,
                                    "wrapperComponent": "",
                                    "onEvent": {
                                        "click": {
                                            "actions": [
                                                {
                                                    "actionType": "custom",
                                                    "script": "/* 自定义JS使用说明：\n  * 1.动作执行函数doAction，可以执行所有类型的动作\n  * 2.通过上下文对象context可以获取当前组件实例，例如context.props可以获取该组件相关属性\n  * 3.事件对象event，在doAction之后执行event.stopPropagation();可以阻止后续动作执行\n*/\n// console.log('1==>', event.data);\nlet location = {};\nif (window.BMap) {\n  // 地址逆解析\n  function GetLocation() {\n    var geoc = new BMap.Geocoder();\n    geoc.getLocation(window.baiduPoint, function (rs) {// 获取当前定位所在详细地址\n      var addComp = rs.addressComponents;\n      var address = addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber;\n      const lng = rs.point.lng;\n      const lat = rs.point.lat;\n      let coordinates = [lng, lat];\n      if (window.coordtransform) {\n        // 目前用的是百度地图\n        // if (coordinatesType.toLowerCase() === 'bd09') {\n          const bd09togcj02 = window.coordtransform.bd09togcj02(lng, lat);\n          coordinates = window.coordtransform.gcj02towgs84(bd09togcj02[0], bd09togcj02[1]);\n        // } else if (coordinatesType.toLowerCase() === 'gcj02') {\n        //   coordinates = window.coordtransform.gcj02towgs84(lng, lat);\n        // }\n      }\n      const wgs84 = {\n        type: \"Point\",\n        coordinates\n      }\n\n      location = {\n        \"address\": address,\n        \"lat\": lat,\n        \"lng\": lng,\n        \"city\": addComp.city,\n        \"vendor\": \"baidu\",\n        wgs84\n      }\n\n      const user = event.data.global.user;\n      const currentDate = new Date();\n      const formattedDate = currentDate.toISOString();\n\n      const doc = {\n        staff: user.userId,\n        date_time: formattedDate,\n        company: user.company._id,\n        department: user.organization._id,\n        data_source: \"mobile\",\n        site: location\n      }\n      // console.log('doc==>', doc);\n      var queryResult = Steedos.authRequest(\"/graphql\", {\n        type: 'POST',\n        async: false,\n        data: JSON.stringify({\n          query: `mutation{record:attendance__insert(doc: ${JSON.stringify(JSON.stringify(doc))}){_id}}`\n        }),\n        contentType: 'application/json',\n        error: function () { }\n      });\n      // console.log('queryResult==>', queryResult);\n\n      if (queryResult.errors) {\n        doAction(\n          {\n            actionType: 'toast',\n            args: {\n              \"timeout\": 1000,\n              \"msgType\": \"info\",\n              \"msg\": queryResult.errors[0].message,\n              \"position\": \"center\"\n            }\n          });\n        // alert(\"您已在\" + address + \"打卡成功\")\n      }\n      if (queryResult && queryResult.data && queryResult.data.record) {\n        doAction(\n          {\n            actionType: 'toast',\n            args: {\n              \"timeout\": 1000,\n              \"msgType\": \"info\",\n              \"msg\": \"您已在\" + address + \"打卡成功\",\n              \"position\": \"center\"\n            }\n          });\n        // alert(\"您已在\" + address + \"打卡成功\")\n      }\n      \n    });\n  }\n\n  if (window.baiduMap) {\n    // 打卡\n    // window.signIn = function signIn() {\n    var is_in_scope = window.baiduMapScope;\n    // var distance = window.baiduMap.getDistance(window.baiduPoint, window.baiduPointAttendance).toFixed(2);\n    // console.log('dis==>', is_in_scope);\n    if (is_in_scope) {\n      GetLocation()\n    } else {\n      // event.stopPropagation();\n      // alert(\"超出考勤地点范围，打卡失败\")\n      doAction(\n        {\n          actionType: 'toast',\n          args: {\n            \"timeout\": 1000,\n            \"msgType\": \"info\",\n            \"msg\": \"超出考勤地点范围，打卡失败！\",\n            \"position\": \"center\"\n          }\n        });\n    }\n  }\n  \n}\n\n",
                                                    "expression": "${is_clock_in}"
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            "id": "service_signIn",
                            "data": {
                                "date_time": "${DATETOSTR(date, 'YYYY-MM-DD HH:mm:ss')}",
                                "&": "$$"
                            },
                            "messages": {},
                            "api": {
                                "url": "${context.rootUrl}/ifClockInToday",
                                "method": "post",
                                "data": {
                                    "date_time": "${DATETOSTR(date, 'YYYY-MM-DD HH:mm:ss')}",
                                    "&": "$$"
                                },
                                "messages": {},
                                "requestAdaptor": "",
                                "headers": {
                                    "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                },
                                "responseData": {
                                    "&": "$$"
                                }
                            }
                        }
                    ],
                    "style": {
                        "position": "static",
                        "display": "flex",
                        "textAlign": "center",
                        "height": "150px",
                        "overflowY": "auto",
                        "overflowX": "auto",
                        "margin": "0",
                        "background": "#3889dd",
                        "flex": "0 0 150px",
                        "flexBasis": "150px",
                        "radius": {
                            "top-left-border-radius": "50%",
                            "top-right-border-radius": "50%",
                            "bottom-left-border-radius": "50%",
                            "bottom-right-border-radius": "50%"
                        },
                        "flexWrap": "nowrap",
                        "flexDirection": "column",
                        "justifyContent": "center",
                        "boxShadow": " 0 0 1em lightblue"
                    },
                    "wrapperBody": false,
                    "id": "u:073c235a0b2c",
                    "isFixedHeight": true,
                    "isFixedWidth": true
                }
            ],
            "style": {
                "position": "static",
                "display": "flex",
                "marginTop": "15px",
                "radius": {
                    "top-left-border-radius": "0.5rem",
                    "top-right-border-radius": "0.5rem",
                    "bottom-left-border-radius": "0.5rem",
                    "bottom-right-border-radius": "0.5rem"
                },
                "flexWrap": "nowrap",
                "justifyContent": "center",
                "alignItems": "center",
                "flexDirection": "row",
                "marginRight": "",
                "marginBottom": "15px",
                "marginLeft": "",
                "paddingTop": "15px",
                "paddingBottom": "15px",
                "background": "#ffffff"
            },
            "wrapperBody": false,
            "isFixedHeight": false,
            "isFixedWidth": false
        },
        {
            "type": "html",
            "id": "u:befc4a2a005a",
            "html": "<div id='allmap' style='width:100%; min-height: 200px'></div>",
            "style": {
                "display": "none"
            }
        },
        {
            "type": "container",
            "id": "u:f84a093fc302",
            "body": [
                {
                    "type": "button",
                    "body": "<p style=\"text-align: center; margin-bottom:0;\"><svg focusable='false' data-key='down' aria-hidden='true' class='slds-button__icon slds-icon slds-icon-standard-client rounded'><use xlink:href='/assets/icons/standard-sprite/svg/symbols.svg#client'></use></svg> <p style=\"text-align: center;margin-bottom:0;\">请假</p></p>",
                    "object_name": "attendance_leave",
                    "$ref": "onevent",
                    "object_name_label": "请假",
                    "id": "u:2f0963609b24",
                    "className": "w-1/4"
                },
                {
                    "type": "button",
                    "body": "<p style=\"text-align: center; margin-bottom:0;\"><svg focusable='false' data-key='down' aria-hidden='true' class='slds-button__icon slds-icon slds-icon-standard-household rounded'><use xlink:href='/assets/icons/standard-sprite/svg/symbols.svg#household'></use></svg> <p style=\"text-align: center;margin-bottom:0;\">加班</p></p>",
                    "object_name": "attendance_overtime",
                    "$ref": "onevent",
                    "object_name_label": "加班",
                    "id": "u:55a73f1fe0de",
                    "className": "w-1/4"
                },
                {
                    "type": "button",
                    "body": "<p style=\"text-align: center; margin-bottom:0;\"><svg focusable='false' data-key='down' aria-hidden='true' class='slds-button__icon slds-icon slds-icon-standard-address rounded'><use xlink:href='/assets/icons/standard-sprite/svg/symbols.svg#address'></use></svg> <p style=\"text-align: center;margin-bottom:0;\">出差</p></p>",
                    "object_name": "attendance_business_out",
                    "$ref": "onevent",
                    "object_name_label": "出差",
                    "id": "u:55a73f1fe0de",
                    "className": "w-1/4"
                },
                {
                    "type": "button",
                    "body": "<p style=\"text-align: center; margin-bottom:0;\"><svg focusable='false' data-key='down' aria-hidden='true' class='slds-button__icon slds-icon slds-icon-standard-announcement rounded'><use xlink:href='/assets/icons/standard-sprite/svg/symbols.svg#announcement'></use></svg> <p style=\"text-align: center;margin-bottom:0;\">外出</p></p>",
                    "object_name": "attendance_going_out",
                    "$ref": "onevent",
                    "object_name_label": "外出",
                    "id": "u:55a73f1fe0de",
                    "className": "w-1/4"
                },
                {
                    "type": "button",
                    "body": "<p style=\"text-align: center; margin-bottom:0;\"><svg focusable='false' data-key='down' aria-hidden='true' class='slds-button__icon slds-icon slds-icon-standard-goals rounded'><use xlink:href='/assets/icons/standard-sprite/svg/symbols.svg#goals'></use></svg> <p style=\"text-align: center;margin-bottom:0;\">补卡</p></p>",
                    "object_name": "attendance_retroactive",
                    "$ref": "onevent",
                    "object_name_label": "补卡",
                    "id": "u:55a73f1fe0de",
                    "className": "w-1/4"
                }
            ],
            "style": {
                "position": "static",
                "display": "flex",
                "marginTop": "0.2rem",
                "paddingTop": "2rem",
                "paddingRight": "1rem",
                "paddingBottom": "1rem",
                "paddingLeft": "1rem",
                "background": "#ffffff",
                "radius": {
                    "top-left-border-radius": "0.5rem",
                    "top-right-border-radius": "0.5rem",
                    "bottom-left-border-radius": "0.5rem",
                    "bottom-right-border-radius": "0.5rem"
                },
                "flexWrap": "wrap",
                "justifyContent": "flex-start",
                "alignItems": "center",
                "overflowX": "auto",
                "overflowY": "auto"
            },
            "wrapperBody": false,
            "isFixedHeight": false,
            "isFixedWidth": false
        }
    ],
    "regions": [
        "body"
    ],
    "data": {
        "initialValues": {},
        "appId": "builder",
        "title": "",
        "context": {}
    },
    "id": "u:e466c6645bbf",
    "asideResizor": false,
    "pullRefresh": {
        "disabled": true
    },
    "style": {
        "background": "#edebeb"
    },
    "onEvent": {
        "init": {
            "weight": 0,
            "actions": [
                {
                    "actionType": "custom",
                    "script": "/* 自定义JS使用说明：\n  * 1.动作执行函数doAction，可以执行所有类型的动作\n  * 2.通过上下文对象context可以获取当前组件实例，例如context.props可以获取该组件相关属性\n  * 3.事件对象event，在doAction之后执行event.stopPropagation();可以阻止后续动作执行\n*/\n\nwindow.HOST_TYPE = \"2\";\nwindow.BMap_loadScriptTime = (new Date).getTime();\nvar scriptElement = document.createElement('script');\n// 设置 <script> 的 src 属性为外部 JavaScript 文件的链接\nscriptElement.src = 'https://api.map.baidu.com/getscript?v=2.0&ak=jcPrlV5Oths31icz8gFEZq8XluDVySij&services=&t=20230614151255';\ndocument.head.appendChild(scriptElement);\n"
                }
            ]
        }
    },
    "css": {
        ".antd-Page-body": {
            "display": "flex",
            "height": "100vh",
            "flex-direction": "column"
        },
        "#allmap": {
            "height": "100%"
        },
        ".antd-Page-body > .antd-TplField > span": {
            "display": "block",
            "height": "100%"
        }
    },
    "definitions": {
        "onevent": {
            "onEvent": {
                "click": {
                    "actions": [
                        {
                            "actionType": "custom",
                            "script": "\nconst object_name = context.props.object_name;\nconst object_name_label = context.props.object_name_label;\n\ndoAction(\n  {\n    actionType: 'dialog',\n    dialog: {\n      \"type\": \"dialog\",\n      \"title\": \"新建 \" + object_name_label,\n      \"body\": [\n        {\n          \"type\": \"steedos-object-form\",\n          \"label\": \"对象表单\",\n          \"mode\": \"edit\",\n          \"objectApiName\": object_name,\n          \"recordId\": \"\",\n          \"className\": \"sm:border sm:rounded sm:border-gray-300 bg-white p-4\",\n          \"form\": {\n            \"onEvent\": {\n              \"submitSucc\": {\n                \"weight\": 0,\n                \"actions\": [\n                  {\n                    \"actionType\": \"link\",\n                    \"args\": {\n                      \"link\": `/app/-/${object_name}/view/\\${event.data.result.data.recordId}`,\n                      \"blank\": false\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      ],\n      \"showCloseButton\": true,\n      \"showErrorMsg\": true,\n      \"showLoading\": true,\n      \"size\": \"md\",\n      \"className\": \"app-popover\"\n    }\n  }\n);\n"
                        }
                    ]
                }
            }
        }
    },
    "initApi": {
        "url": "${context.rootUrl}/graphql",
        "method": "post",
        "headers": {
            "Authorization": "Bearer ${context.tenantId},${context.authToken}"
        },
        "requestAdaptor": "",
        "adaptor": "// console.log('payloa==', payload)\nlet rows = payload.data.rows;\nif (rows.length == 0) {\n  rows = [\n    {\n      site: {\n        lng: 121.32361970962428,\n        lat: 31.139219622963502\n      },\n      valid_range: 500\n    }\n  ]\n}\n// 遍历多个考勤地点\nfor (var i = 0; i < rows.length; i++) {\n  const nearest_location = rows[i];\n  const site = nearest_location.site;\n  const valid_range = nearest_location.valid_range;\n  try {\n    if (window.BMap) {\n      var map;\n      var geolocation;\n      var pointAttendance;\n      var point;\n      var allmapDiv = document.getElementById('allmap');\n      if (!allmapDiv || !allmapDiv.childNodes || !allmapDiv.childNodes.length) {\n        window.BMapInt = false;\n      }\n      if (!window.BMapInt) {\n        map = new BMap.Map(\"allmap\");\n        window.BMapInt = true;\n        // console.log('0cc==>', map)\n        // 当前用户位置默认值\n        point = new BMap.Point(121.32361970962428, 31.139219622963502);\n        map.centerAndZoom(point, 15);\n\n        geolocation = new BMap.Geolocation();\n        geolocation.enableSDKLocation();\n      }\n      if (map && !!geolocation) {\n        geolocation.getCurrentPosition(function (r) {\n          if (this.getStatus() == BMAP_STATUS_SUCCESS) {\n            var mk = new BMap.Marker(r.point);\n            map.addOverlay(mk); // 标出自己的当前所在地\n            map.panTo(r.point); // 地图中心移动到自己的当前位置\n            point = new BMap.Point(r.point.lng, r.point.lat); // 获取自己当前位置经纬度\n            // map.centerAndZoom(point, 15);\n            // console.log(\"point\", point)\n            // 121.32361970962428 ， 31.139219622963502\n            // 当前考勤点位置默认值\n            // var coordinate = \"121.32361970962428,31.139219622963502\";// 设置考勤点经纬度\n            // var arr = coordinate.split(\",\");// 切割经纬度\n            // var lon = arr[0];\n            // var lat = arr[1];\n            // 设置考勤点经纬度\n            var lon = site.lng;\n            var lat = site.lat;\n            pointAttendance = new BMap.Point(lon, lat);\n            var circle = new BMap.Circle(pointAttendance, valid_range, { // 考勤地点范围\n              fillColor: \"blue\", // 圆形颜色\n              strokeWeight: 1,\n              fillOpacity: 0.2,\n              strokeOpacity: 0.2\n            });\n            map.addOverlay(circle);\n            var r = new BMap.Marker(pointAttendance);\n            map.addOverlay(r); // 标出考勤点的位置\n\n            window.baiduMap = map;\n            window.baiduPoint = point;\n            window.baiduPointAttendance = pointAttendance;\n            window.baiduMapScope = false;\n            var distance = map.getDistance(point, pointAttendance).toFixed(2);\n            if (distance <= valid_range) {\n              window.baiduMapScope = true;\n              // break;\n            }\n\n            // console.log('ccccc==>',window)\n          } else {\n            alert('failed' + this.getStatus());\n          }\n        }, { enableHighAccuracy: true })\n      }\n\n    }\n  } catch (err) {\n    console.log('error:', err.message)\n  }\n  if (window.baiduMapScope) {\n    // 当检测到某个符合要求的考勤地点，跳出for循环。\n    break;\n  }\n}\n\nreturn payload;",
        "messages": {},
        "data": {
            "query": "{rows:attendance_site{ name,site,valid_range }}"
        }
    }
}